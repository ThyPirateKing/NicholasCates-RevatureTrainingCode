// <auto-generated />
using System;
using CharacterData.Repo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharacterData.Repo.Migrations
{
    [DbContext(typeof(CharacterContext))]
    [Migration("20240805202448_InitialMigrationTest5")]
    partial class InitialMigrationTest5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharacterClassItem", b =>
                {
                    b.Property<int>("characterClassid")
                        .HasColumnType("int");

                    b.Property<int>("itemid")
                        .HasColumnType("int");

                    b.HasKey("characterClassid", "itemid");

                    b.HasIndex("itemid");

                    b.ToTable("CharacterClassItem");
                });

            modelBuilder.Entity("CharacterData.Models.Character", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("characterClassid")
                        .HasColumnType("int");

                    b.Property<int>("currentHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("dex")
                        .HasColumnType("int");

                    b.Property<int>("experience")
                        .HasColumnType("int");

                    b.Property<int>("gold")
                        .HasColumnType("int");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.Property<int>("magic")
                        .HasColumnType("int");

                    b.Property<int>("magicResist")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("str")
                        .HasColumnType("int");

                    b.Property<int>("wis")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("characterClassid");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CharacterData.Models.CharacterClass", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("baseScore")
                        .HasColumnType("int");

                    b.Property<string>("className")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("dex")
                        .HasColumnType("int");

                    b.Property<int>("magic")
                        .HasColumnType("int");

                    b.Property<int>("magicResist")
                        .HasColumnType("int");

                    b.Property<int>("str")
                        .HasColumnType("int");

                    b.Property<int>("wis")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("CharacterClass");
                });

            modelBuilder.Entity("CharacterData.Models.Item", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Characterid")
                        .HasColumnType("int");

                    b.Property<int>("armorClassBonus")
                        .HasColumnType("int");

                    b.Property<string>("attackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("currentHitPointBonus")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("dexRequirement")
                        .HasColumnType("int");

                    b.Property<bool>("isEquipped")
                        .HasColumnType("bit");

                    b.Property<int>("magicAttackBonus")
                        .HasColumnType("int");

                    b.Property<int>("magicDamageBonus")
                        .HasColumnType("int");

                    b.Property<int>("magicRequirement")
                        .HasColumnType("int");

                    b.Property<int>("maxHitPointBonus")
                        .HasColumnType("int");

                    b.Property<int>("meleeAttackBonus")
                        .HasColumnType("int");

                    b.Property<int>("meleeDamageBonus")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rangedAttackBonus")
                        .HasColumnType("int");

                    b.Property<int>("rangedDamageBonus")
                        .HasColumnType("int");

                    b.Property<string>("slotType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("strRequirement")
                        .HasColumnType("int");

                    b.Property<string>("typeOfDamage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("typeOfItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.Property<double>("weight")
                        .HasColumnType("float");

                    b.Property<int>("wisRequirement")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Characterid");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("CharacterClassItem", b =>
                {
                    b.HasOne("CharacterData.Models.CharacterClass", null)
                        .WithMany()
                        .HasForeignKey("characterClassid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterData.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("itemid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterData.Models.Character", b =>
                {
                    b.HasOne("CharacterData.Models.CharacterClass", "characterClass")
                        .WithMany()
                        .HasForeignKey("characterClassid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("characterClass");
                });

            modelBuilder.Entity("CharacterData.Models.Item", b =>
                {
                    b.HasOne("CharacterData.Models.Character", null)
                        .WithMany("inventory")
                        .HasForeignKey("Characterid");
                });

            modelBuilder.Entity("CharacterData.Models.Character", b =>
                {
                    b.Navigation("inventory");
                });
#pragma warning restore 612, 618
        }
    }
}
